def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


//def keystoreProperties = new Properties()
//
//if (System.getenv("CI")) {  // Checks if in CI environment
//    println "Running in CI environment"
//
//    keystoreProperties['storeFile'] = System.getenv("KEYSTORE_PATH")
//    println "Keystore Path: ${keystoreProperties['storeFile']}"
//
//    keystoreProperties['keyAlias'] = System.getenv("KEY_ALIAS")
//    println "Key Alias: ${keystoreProperties['keyAlias']}"
//
//    keystoreProperties['keyPassword'] = System.getenv("KEY_PASSWORD")
//    println "Key Password: ${keystoreProperties['keyPassword']}"
//
//    keystoreProperties['storePassword'] = System.getenv("KEYSTORE_PASSWORD")
//    println "Store Password: ${keystoreProperties['storePassword']}"
//} else {
//    println "Running locally"
//    def keystorePropertiesFile = rootProject.file('key.properties')
//    if (keystorePropertiesFile.exists()) {
//        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
//    }
//}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE_PATH") ?: "C:\\Users\\gizet\\.android\\keystore\\autodrive-prod.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.devsite.auto_drive"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            signingConfig signingConfigs.release
            // Signing with the debug keys for now, so `flutter run --release` works.
            //signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}
